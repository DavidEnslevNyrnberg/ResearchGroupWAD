## capture all the output to a file.
################# Collect from Twitter
# for creating a twitter app (apps.twitter.com) see youtube https://youtu.be/lT4Kosc_ers
#consumer_key <-'your key'
#consumer_scret <- 'your secret'
#access_token <- 'your access token'
#access_scret <- 'your access scret'
source("twitter_keys.R") #this file will set my personal variables for my twitter app, adjust the name of this file. use the provide template your_twitter.R
setup_twitter_oauth(consumer_key,consumer_secret, access_token,access_secret) #connect to  twitter app
##### This example uses the following 3 celebrities: Donald Trump, Hillary Clinton, and Bernie Sanders
##  You should replace this with your own celebrities, at least 3, but more preferred
##  Note that it will take the computer some to collect the tweets
tweets_T <- searchTwitter("#trump", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
tweets_C <- searchTwitter("#hillary", n=1000, lang="en", resultType="recent") #1000 recent tweets about Hillary Clinton
tweets_B <- searchTwitter("#bernie", n=1000, lang="en", resultType="recent") #1000 recent tweets about Bernie Sanders
######################## WordCloud
### This not requires in the assignment, but still fun to do
# based on https://youtu.be/JoArGkOpeU0
#corpus_T<-clearTweets(tweets_T, c("trump","amp","realdonaldtrump","trumptrain","donald","trumps","alwaystrump")) #remove also some campain slogans
#wordcloud(corpus_T, max.words=50)
#corpus_C<-clearTweets(tweets_C, c("hillary","amp","clinton","hillarys"))
#wordcloud(corpus_C,  max.words=50)
#corpus_B<-clearTweets(tweets_B, c("bernie", "amp", "sanders","bernies"))
#wordcloud(corpus_B,  max.words=50)
##############################
######################## Sentiment analysis
tweets_T.text <- laply(tweets_T, function(t)t$getText()) #get text out of tweets
tweets_C.text <- laply(tweets_C, function(t)t$getText()) #get text out of tweets
tweets_B.text <- laply(tweets_B, function(t)t$getText()) #get text out of tweets
#taken from https://github.com/mjhea0/twitter-sentiment-analysis
pos <- scan('positive-words.txt', what = 'character', comment.char=';') #read the positive words
neg <- scan('negative-words.txt', what = 'character', comment.char=';') #read the negative words
source("sentiment3.R") #load algoritm
# see sentiment3.R form more information about sentiment analysis. It assigns a intereger score
# by substracitng the number of occurrence of negative words from that of positive words
analysis_T <- score.sentiment(tweets_T.text, pos, neg)
analysis_C <- score.sentiment(tweets_C.text, pos, neg)
analysis_B <- score.sentiment(tweets_B.text, pos, neg)
sem<-data.frame(analysis_T$score, analysis_C$score, analysis_B$score)
semFrame <-melt(sem, measured=c(analysis_T.score,analysis_C.score, analysis_B.score ))
names(semFrame) <- c("Candidate", "score")
semFrame$Candidate <-factor(semFrame$Candidate, labels=c("Donald Trump", "Hillary Clinton", "Bernie Sanders")) # change the labels for your celibrities
#The data you need for the analyses can be found in semFrame
if (FALSE) {
install.packages("base64enc")
install.packages("twitteR", dependencies = TRUE)
install.packages("RCurl", dependencies = T)
install.packages("bitops", dependencies = T)
install.packages("plyr", dependencies = T)
install.packages('stringr', dependencies = T)
install.packages("NLP", dependencies = T)
install.packages("tm", dependencies = T)
install.packages("wordcloud", dependencies=T)
install.packages("RColorBrewer", dependencies=TRUE)
install.packages("reshape", dependencies=T)
}
library(twitteR)
library(bitops)
library(RCurl)
library(plyr)
library(stringr)
library(NLP)
library(tm)
library(RColorBrewer)
library(wordcloud)
library(reshape)
library(base64enc)
# load local textfiles listing key positive and negative words
#taken from https://github.com/mjhea0/twitter-sentiment-analysis
positive_words = scan('positive-words.txt', what = 'character', comment.char=';') #read the positive words
negative_words = scan('negative-words.txt', what = 'character', comment.char=';') #read the negative words
# set up twitter sesssion
source("twitter_keys.R") # imports consumer_key, consumer_secret, access_key, and access_secret
source("sentiment3.R")
setup_twitter_oauth(consumer_key, consumer_secret,access_token, access_secret)
tweets_O  = searchTwitter("@OffsetYRN", n=1e3, lang="en", resultType="recent")
tweets_D  = searchTwitter("@Drake", n=1e3, lang="en", resultType="recent")
tweets_AG = searchTwitter("@ArianaGrande", n=1e3, lang="en", resultType="recent")
tweets_CB = searchTwitter("@IAmCardiB", n=1e3, lang="en", resultType="recent")
tweets_LP = searchTwitter("@LilPump", n=1e3, lang="en", resultType="recent")
tweets_NM = searchTwitter("@NickiMinaj", n=1e3, lang="en", resultType="recent")
tweets_KW.parsed =laply(tweets_KW, function(t)t$getText())
source("sentiment3.R")
tweets_KW.parsed =laply(tweets_KW, function(t)t$getText())
tweets_O.parsed  = laply(tweets_O,  function(t)t$getText())
tweets_D.parsed  = laply(tweets_D,  function(t)t$getText())
tweets_AG.parsed = laply(tweets_AG, function(t)t$getText())
tweets_CB.parsed = laply(tweets_CB, function(t)t$getText())
tweets_LP.parsed = laply(tweets_LP, function(t)t$getText())
tweets_NM.parsed = laply(tweets_NM, function(t)t$getText())
tweets_O.analysis  = score.sentiment(tweets_O.parsed,  positive_words, negative_words)
tweets_D.analysis  = score.sentiment(tweets_D.parsed,  positive_words, negative_words)
tweets_AG.analysis = score.sentiment(tweets_AG.parsed, positive_words, negative_words)
tweets_CB.analysis = score.sentiment(tweets_CB.parsed, positive_words, negative_words)
tweets_LP.analysis = score.sentiment(tweets_LP.parsed, positive_words, negative_words)
tweets_NM.analysis = score.sentiment(tweets_NM.parsed, positive_words, negative_words)
sem = data.frame(O  =  tweets_O.analysis$score,
D  =  tweets_D.analysis$score,
AG = tweets_AG.analysis$score,
CB = tweets_CB.analysis$score,
LP = tweets_LP.analysis$score,
NM = tweets_NM.analysis$score)
sem_frame = melt(sem, measured=c(analysis_T.score,analysis_C.score, analysis_B.score ))
sem = data.frame(O  =  tweets_O.analysis$score,
D  =  tweets_D.analysis$score,
AG = tweets_AG.analysis$score,
CB = tweets_CB.analysis$score,
LP = tweets_LP.analysis$score,
NM = tweets_NM.analysis$score)
sem_frame = melt(sem, measured=c(tweets_O.analysis$score,
tweets_D.analysis$score,
tweets_AG.analysis$score,
tweets_CB/analysis$score,
tweets_LP/analysis$score,
tweets_NM/analysis$score))
sem = data.frame(O  =  tweets_O.analysis$score,
D  =  tweets_D.analysis$score,
AG = tweets_AG.analysis$score,
CB = tweets_CB.analysis$score,
LP = tweets_LP.analysis$score,
NM = tweets_NM.analysis$score)
sem_frame = melt(sem, measured=c(tweets_O.analysis$score,
tweets_D.analysis$score,
tweets_AG.analysis$score,
tweets_CB/analysis$score,
tweets_LP/analysis$score,
tweets_NM/analysis$score))
sem_frame$candidate <-factor(sem_framr$candidate, labels=c("Offset",
"Drake",
"Ariana Grande",
"Cardi B",
"Lil Pump",
"Nicki Minaj"))
sem_frame$candidate <-factor(sem_frame$candidate, labels=c("Offset",
"Drake",
"Ariana Grande",
"Cardi B",
"Lil Pump",
"Nicki Minaj"))
sem = data.frame(O  =  tweets_O.analysis$score,
D  =  tweets_D.analysis$score,
AG = tweets_AG.analysis$score,
CB = tweets_CB.analysis$score,
LP = tweets_LP.analysis$score,
NM = tweets_NM.analysis$score)
sem_frame = melt(sem, measured=c(tweets_O.analysis$score,
tweets_D.analysis$score,
tweets_AG.analysis$score,
tweets_CB/analysis$score,
tweets_LP/analysis$score,
tweets_NM/analysis$score))
sem_frame$candidate <-factor(sem_frame$candidate, labels=c("Offset",
"Drake",
"Ariana Grande",
"Cardi B",
"Lil Pump",
"Nicki Minaj"))
names(sem_frame) <- c("candidate", "score")
sem_frame$candidate <-factor(sem_frame$candidate, labels=c("Offset",
"Drake",
"Ariana Grande",
"Cardi B",
"Lil Pump",
"Nicki Minaj"))
if (TRUE) {
tweets_O  = searchTwitter("@OffsetYRN", n=1e3, lang="en", resultType="recent")
tweets_D  = searchTwitter("@Drake", n=1e3, lang="en", resultType="recent")
tweets_AG = searchTwitter("@ArianaGrande", n=1e3, lang="en", resultType="recent")
tweets_CB = searchTwitter("@IAmCardiB", n=1e3, lang="en", resultType="recent")
tweets_LP = searchTwitter("@LilPump", n=1e3, lang="en", resultType="recent")
tweets_NM = searchTwitter("@NickiMinaj", n=1e3, lang="en", resultType="recent")
}
var(tweets_O.analysis$score)
var(tweets_O.analysis$score)
var(tweets_D.analysis$score)
var(tweets_AG.analysis$score)
var(tweets_CB.analysis$score)
var(tweets_LP.analysis$score)
var(tweets_NM.analysis$score)
?levene.test
??levene.test
leveneTest
?leveneTest
??leveneTest
library(car)
?leveneTest
leveneTest(tweets_O.analysis$score,
tweets_D.analysis$score,
tweets_AG.analysis$score,
tweets_CB.analysis$score,
tweets_LP.analysis$score,
tweets_NM.analysis$score)
sem_frame
leveneTest(score ~ candidate, sem_frame)
hov = leveneTest(score ~ candidate, sem_frame)
hov
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(2,2))
#par(mfrow=c(2,1))
boxplot(score ~ candidate, sem_frame)
density(score ~ candidate, sem_frame)
density(sem_frame[Offset])
density(sem_frame['Offset])
density(sem_frame['Offset])
density(sem_frame["Offset"])
density(sem_frame[candidate="Offset"])
density(sem_frame[candidate == "Offset"])
density(sem_frame[which(candidate == "Offset")])
density(sem_frame[sem_frame$candidate == "Offset"])
density(sem_frame[sem_frame$candidate == "Offset",])
density(sem_frame[sem_frame$candidate == "Offset",]$score)
plot(density(sem_frame[sem_frame$candidate == "Offset",]$score))
plot(hist(sem_frame[sem_frame$candidate == "Offset",]$score))
plot(hist(sem_frame[sem_frame$candidate == "Offset",]$score, breaks = 5))
plot(hist(sem_frame[sem_frame$candidate == "Offset",]$score, breaks = 5))
sem_frame$candidate
set(sem_frame$candidate)
unique(sem_frame$candidate)
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = 5)
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = 10)
}
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = 10, xlim = c(-5, 5_))
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = 10, xlim = c(-5, 5))
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = 10, xlim = c(-5, 5))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-4:4), xlim = c(-5, 5))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-4:4))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-4, -3, -2, -1, 0, 1, 2, 3, 4))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-3, -2, -1, 0, 1, 2, 3))
}
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-4, 4, 1)))
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-4, 4, 1)))
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-4, 4, 1))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-3, 3, 1))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-5, 5, 1))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1), main=paste("Tweet Sentiments for ", name))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score")
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim = 500)
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 500))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(3,2))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 1000))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(6,1))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 1000))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(1,6))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 1000))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(2,3))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 1000))
}
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(2,3))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 750))
}
if (TRUE) {
tweets_O  = searchTwitter("@OAC", n=1e3, lang="en", resultType="recent")
tweets_D  = searchTwitter("@realDonaldTrump", n=1e3, lang="en", resultType="recent")
tweets_AG = searchTwitter("@ArianaGrande", n=1e3, lang="en", resultType="recent")
tweets_CB = searchTwitter("@IAmCardiB", n=1e3, lang="en", resultType="recent")
tweets_LP = searchTwitter("@LilPump", n=1e3, lang="en", resultType="recent")
tweets_NM = searchTwitter("@NickiMinaj", n=1e3, lang="en", resultType="recent")
}
tweets_O.parsed  = laply(tweets_O,  function(t)t$getText())
tweets_D.parsed  = laply(tweets_D,  function(t)t$getText())
tweets_AG.parsed = laply(tweets_AG, function(t)t$getText())
tweets_CB.parsed = laply(tweets_CB, function(t)t$getText())
tweets_LP.parsed = laply(tweets_LP, function(t)t$getText())
tweets_NM.parsed = laply(tweets_NM, function(t)t$getText())
tweets_O.analysis  = score.sentiment(tweets_O.parsed,  positive_words, negative_words)
tweets_D.analysis  = score.sentiment(tweets_D.parsed,  positive_words, negative_words)
tweets_AG.analysis = score.sentiment(tweets_AG.parsed, positive_words, negative_words)
tweets_CB.analysis = score.sentiment(tweets_CB.parsed, positive_words, negative_words)
tweets_LP.analysis = score.sentiment(tweets_LP.parsed, positive_words, negative_words)
tweets_NM.analysis = score.sentiment(tweets_NM.parsed, positive_words, negative_words)
sem = data.frame(O  =  tweets_O.analysis$score,
D  =  tweets_D.analysis$score,
AG = tweets_AG.analysis$score,
CB = tweets_CB.analysis$score,
LP = tweets_LP.analysis$score,
NM = tweets_NM.analysis$score)
length(tweets_O)
if (TRUE) {
tweets_O  = searchTwitter("@AOC", n=1e3, lang="en", resultType="recent")
tweets_D  = searchTwitter("@realDonaldTrump", n=1e3, lang="en", resultType="recent")
tweets_AG = searchTwitter("@ArianaGrande", n=1e3, lang="en", resultType="recent")
tweets_CB = searchTwitter("@IAmCardiB", n=1e3, lang="en", resultType="recent")
tweets_LP = searchTwitter("@LilPump", n=1e3, lang="en", resultType="recent")
tweets_NM = searchTwitter("@NickiMinaj", n=1e3, lang="en", resultType="recent")
}
tweets_O.parsed  = laply(tweets_O,  function(t)t$getText())
tweets_D.parsed  = laply(tweets_D,  function(t)t$getText())
tweets_AG.parsed = laply(tweets_AG, function(t)t$getText())
tweets_CB.parsed = laply(tweets_CB, function(t)t$getText())
tweets_LP.parsed = laply(tweets_LP, function(t)t$getText())
tweets_NM.parsed = laply(tweets_NM, function(t)t$getText())
tweets_O.analysis  = score.sentiment(tweets_O.parsed,  positive_words, negative_words)
tweets_D.analysis  = score.sentiment(tweets_D.parsed,  positive_words, negative_words)
tweets_AG.analysis = score.sentiment(tweets_AG.parsed, positive_words, negative_words)
tweets_CB.analysis = score.sentiment(tweets_CB.parsed, positive_words, negative_words)
tweets_LP.analysis = score.sentiment(tweets_LP.parsed, positive_words, negative_words)
tweets_NM.analysis = score.sentiment(tweets_NM.parsed, positive_words, negative_words)
length(tweets_O)
sem = data.frame(O  =  tweets_O.analysis$score,
D  =  tweets_D.analysis$score,
AG = tweets_AG.analysis$score,
CB = tweets_CB.analysis$score,
LP = tweets_LP.analysis$score,
NM = tweets_NM.analysis$score)
sem_frame = melt(sem, measured=c(tweets_O.analysis$score,
tweets_D.analysis$score,
tweets_AG.analysis$score,
tweets_CB/analysis$score,
tweets_LP/analysis$score,
tweets_NM/analysis$score))
names(sem_frame) <- c("candidate", "score")
sem_frame$candidate <-factor(sem_frame$candidate, labels=c("Offset",
"Drake",
"Ariana Grande",
"Cardi B",
"Lil Pump",
"Nicki Minaj"))
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(2,3))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 750))
}
if (TRUE) {
tweets_KW = searchTwitter("@KanyeWest", n=1e3, lang="en", resultType="recent")
tweets_D  = searchTwitter("@Drake", n=1e3, lang="en", resultType="recent")
tweets_BS = searchTwitter("@ArianaGrande", n=1e3, lang="en", resultType="recent")
tweets_MC = searchTwitter("@IAmCardiB", n=1e3, lang="en", resultType="recent")
tweets_LP = searchTwitter("@LilPump", n=1e3, lang="en", resultType="recent")
tweets_NM = searchTwitter("@NickiMinaj", n=1e3, lang="en", resultType="recent")
}
kw = getUser("KanyeWest")
kw
tweets_data(kw)
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(2,3))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 750))
}
kw = getUser("KanyeWest")
tweets_data(kw)
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(2,3))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 750))
}
kw = getUser("KanyeWest")
if (FALSE) {
install.packages("base64enc")
install.packages("twitteR", dependencies = TRUE)
install.packages("RCurl", dependencies = T)
install.packages("bitops", dependencies = T)
install.packages("plyr", dependencies = T)
install.packages('stringr', dependencies = T)
install.packages("NLP", dependencies = T)
install.packages("tm", dependencies = T)
install.packages("wordcloud", dependencies=T)
install.packages("RColorBrewer", dependencies=TRUE)
install.packages("reshape", dependencies=T)
}
library(base64enc)
library(twitteR)
library(bitops)
library(RCurl)
library(plyr)
library(stringr)
library(NLP)
library(tm)
library(RColorBrewer)
library(wordcloud)
library(reshape)
library(car)
# load local textfiles listing key positive and negative words
#taken from https://github.com/mjhea0/twitter-sentiment-analysis
positive_words = scan('positive-words.txt', what = 'character', comment.char=';') #read the positive words
negative_words = scan('negative-words.txt', what = 'character', comment.char=';') #read the negative words
# set up twitter sesssion
source("twitter_keys.R") # imports consumer_key, consumer_secret, access_key, and access_secret
source("sentiment3.R")
setup_twitter_oauth(consumer_key, consumer_secret,access_token, access_secret)
if (TRUE) {
tweets_KW = searchTwitter("@KanyeWest", n=1e3, lang="en", resultType="recent")
tweets_D  = searchTwitter("@Drake", n=1e3, lang="en", resultType="recent")
tweets_BS = searchTwitter("@ArianaGrande", n=1e3, lang="en", resultType="recent")
tweets_MC = searchTwitter("@IAmCardiB", n=1e3, lang="en", resultType="recent")
tweets_LP = searchTwitter("@LilPump", n=1e3, lang="en", resultType="recent")
tweets_NM = searchTwitter("@NickiMinaj", n=1e3, lang="en", resultType="recent")
}
tweets_KW.parsed= laply(tweets_KW, function(t)t$getText())
tweets_D.parsed  = laply(tweets_D,  function(t)t$getText())
tweets_AG.parsed = laply(tweets_AG, function(t)t$getText())
tweets_CB.parsed = laply(tweets_CB, function(t)t$getText())
tweets_LP.parsed = laply(tweets_LP, function(t)t$getText())
tweets_NM.parsed = laply(tweets_NM, function(t)t$getText())
tweets_KW.analysis = score.sentiment(tweets_KW.parsed, positive_words, negative_words)
tweets_D.analysis  = score.sentiment(tweets_D.parsed,  positive_words, negative_words)
tweets_AG.analysis = score.sentiment(tweets_AG.parsed, positive_words, negative_words)
tweets_CB.analysis = score.sentiment(tweets_CB.parsed, positive_words, negative_words)
tweets_LP.analysis = score.sentiment(tweets_LP.parsed, positive_words, negative_words)
tweets_NM.analysis = score.sentiment(tweets_NM.parsed, positive_words, negative_words)
length(tweets_O)
sem = data.frame(KW = tweets_KW.analysis$score,
D  =  tweets_D.analysis$score,
AG = tweets_AG.analysis$score,
CB = tweets_CB.analysis$score,
LP = tweets_LP.analysis$score,
NM = tweets_NM.analysis$score)
sem_frame = melt(sem, measured=c(tweets_KW.analysis$score,
tweets_D.analysis$score,
tweets_AG.analysis$score,
tweets_CB.analysis$score,
tweets_LP.analysis$score,
tweets_NM.analysis$score))
names(sem_frame) <- c("candidate", "score")
sem_frame$candidate <-factor(sem_frame$candidate, labels=c("KanyeWest",
"Drake",
"ArianaGrande",
"IAmCardiB",
"LilPump",
"NickiMinaj"))
leveneTest(score ~ candidate, sem_frame)
boxplot(score ~ candidate, sem_frame)
par(mfrow=c(2,3))
for (name in unique(sem_frame$candidate)) {
hist(sem_frame[sem_frame$candidate == name,]$score, breaks = seq(-8, 8, 1),
main=paste("Tweet Sentiments for", name), xlab="sentiment score", ylim=c(0, 750))
}

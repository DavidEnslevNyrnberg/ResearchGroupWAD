knitr::opts_chunk$set(echo = TRUE)
data = read.csv('data.csv')
data
?whick
?which
which(data$TeD = TeD1)
which(data$TeD == TeD1)
which(data$TeD == "TeD1")
data
hist(data[which(grepl('B',data$model))])
hist(data[which(grepl('B',data$model))]$score)
data
data[which(grepl('B',data$model))]
data$model
data[which(data$model=="B1")]
data[which(grepl("B1", data$model))]
hist(data[which(grepl("B",data$model))]$score)
hist(data[which(grepl("B1", data$model))]$score)
data$score
data$score[1]
typeof(data$score[1])
data[which(grepl("B1", data$model))]$score
data[which(grepl("B", data$model))]$score
data[which(grepl("B", data$model))]
data[which(grepl("B1", data$model))]
data[which(grepl("B1", data$model))]$TrD4
data[which(grepl("B1", data$model))]$model
data$model
data[which(grepl("B1", data$model))]
which(grepl("B1", data$model))
which(grepl("B", data$model))
which(grepl("B\d", data$model))
which(grepl("B%d", data$model))
which(grepl("B\\d", data$model))
which(grepl("B\\d", data$model))
which(grepl("B\\d", data$model))
data[2654]
data[[2654]]
data[2654]
data[2654,]
data$model
data = read.csv('data.csv')
which(grepl("B\\d", data$model))
typeof(data$score[1])
hist(data[which(grepl("B", data$model))]$score)
data[which(grepl("B", data$model))]
data[which(grepl('B', data$model))]
data[which(grepl('B', data$model))]
data[which(grepl('B', data$model))]
data[which(data$model == "B1" || data$model == "B2" || data$model == "B3")]
data[which(data$model == "B1" || data$model == "B2" || data$model == "B3")]
hist(data[which(grepl("B", data$model)),]$score)
hist(data[which(grepl("B\\d", data$model)),]$score)
hist(data[which(grepl("S", data$model)),]$score)
hist(data[which(grepl("MF", data$model)),]$score)
hist(data[which(grepl("MN", data$model)),]$score)
hist(data[which(grepl("M3", data$model)),]$score)
hist(data[which(grepl("M1", data$model)),]$score)
hist(data[which(grepl("M1", data$model)),]$score)
hist(data[which(grepl("M1", data$model)),]$score)
abline(v=3)
abline(v=3)
plot(hist(data[which(grepl("M1", data$model)),]$score))
abline(v=3)
abline(v=.2)
plot(hist(data[which(grepl("M1", data$model)),]$score))
abline(v=.2)
abline(v = .8, col="red", lwd=3, lty=2)
hist(data[which(grepl("M1", data$model)),]$score)
abline(v = .8, col="red", lwd=3, lty=2)
z
z
z
z = 1
testSetNames = unique(data$TeD)
testSetNames
print(length(i))
for i in testSetNames {
for (i in testSetNames) {
print(length(i))
}
print(length(i[1]))
for (i in testSetNames) {
print(length(i))
}
print(i)
for (i in testSetNames) {
print(i)
}
for (i in testSetNames) {
print(typeof(i))
}
print(typeof("AWida"))
data = read.csv("data.csv")
testSetNames = unique(data$TeD)
for (ts in testSetNames) {
tlData = data[which(data$TeD==ts && ),]
1 in [1,2,3]
1 %in% [1,2,3]
1 %in% c(1,2,3)
1 in c(1,2,3)
for (ts in testSetNames) {
blData = data[which(data$TeD==ts && (data$TeD %in% baselineNames)),]
tlData = data[which(data$TeD==ts && !(data$TeD %in% baselineNames)),]
hist(tlData)
for (d in blData) {
abline(v=d$score, col="red")
}
}
baselineNames = c("B1", "B2", "B3")
for (ts in testSetNames) {
blData = data[which(data$TeD==ts && (data$TeD %in% baselineNames)),]
tlData = data[which(data$TeD==ts && !(data$TeD %in% baselineNames)),]
hist(tlData)
for (d in blData) {
abline(v=d$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts && (data$TeD %in% baselineNames)),]
tlData = data[which(data$TeD==ts && !(data$TeD %in% baselineNames)),]
hist(tlData$score)
for (d in blData) {
abline(v=d$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts && (data$TeD %in% baselineNames)),]
tlData = data[which(data$TeD==ts && !(data$TeD %in% baselineNames)),]
hist(tlData$score)
for (d in blData) {
print(d)
#abline(v=d$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts && (data$TeD %in% baselineNames)),]
tlData = data[which(data$TeD==ts && !(data$TeD %in% baselineNames)),]
hist(tlData$score)
for (d in blData) {
print(d)
#abline(v=d$score, col="red")
}
}
tlData
blData = data[which(data$TeD==ts && (data$TeD %in% baselineNames)),]
ts
blData = data[which(data$TeD==ts && (data$TeD %in% baselineNames)),]
tlData
blData
blData = data[which(data$TeD==ts),]
blData
ts
blData = data[which(data$TeD==ts) && data$TeD %in% baselineNames,]
blData
blData = data[which(data$TeD==ts) && data$model %in% baselineNames,]
blData
tlData = data[which(data$TeD==ts && !(data$model %in% baselineNames)),]
hist(tlData$score)
blData = data[which(data$TeD==ts) && data$model %in% baselineNames,]
tlData = data[which(data$TeD==ts && !(data$model %in% baselineNames)),]
blData
tlData
blData = data[which(data$TeD==ts) && data$model %in% baselineNames,]
blData
blData = data[data$model %in% baselineNames,]
blData
blData = data[which(data$TeD==ts) & data$model %in% baselineNames,]
blData
ts
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
blData
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
tlData
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (d in blData) {
print(d)
#abline(v=d$score, col="red")
}
}
abline(v=d$score, col="red")
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (d in blData) {
print(d)
#    abline(v=d$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (d in rows(blData)) {
print(d)
#    abline(v=d$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (d in 1:nrows(blData)) {
print(d)
#    abline(v=d$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (d in 1:NROWS(blData)) {
print(d)
#    abline(v=d$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (d in 1:nrow(blData)) {
print(d)
#    abline(v=d$score, col="red")
}
}
abline(v=bl[i,]$score, col="red")
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (i in 1:nrow(blData)) {
abline(v=bl[i,]$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (i in 1:nrow(blData)) {
abline(v=bl[i]$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (i in 1:nrow(blData)) {
abline(v=bl$score[i], col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (i in 1:nrow(blData)) {
abline(v=bl[i,]$score, col="red")
}
}
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col="red")
}
}
library(hash)
library(dict)
library(container)
install.packages("container")
library(container)
dict = container$new()
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score)
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score, main=paste("Performance Histogram of Transfer Learning Models on ", ts), xlab="accuracy")
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
hist(data[which(grepl("M1", data$model)),]$score)
abline(v = .8, col="red", lwd=3, lty=2)
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score, main=paste("Performance Histogram of Transfer Learning Models on ", ts), xlab="accuracy")
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score, main=paste("Performance Histogram of Transfer Learning Models on", ts), xlab="accuracy")
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
par(mfrow=c(4,2))
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
par(mfrow=c(4,2))
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score, main=paste("Performance Histogram of Transfer Learning Models on", ts), xlab="accuracy")
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
# dictionary mapping
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
par(mfrow=c(2,4))
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score,
main=paste("Performance Histogram of Transfer Learning Models on", ts),
xlab="accuracy")
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
# dictionary mapping
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
par(mfrow=c(1,8))
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score,
main=paste("Performance Histogram of Transfer Learning Models on", ts),
xlab="accuracy")
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
# dictionary mapping
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
par(mfrow=c(8,1))
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),]
hist(tlData$score,
main=paste("Performance Histogram of Transfer Learning Models on", ts),
xlab="accuracy")
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
# dictionary mapping baseline model to its line color in the histograms
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
# produce a new histogram of accuracies for each test set
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]    # baseline models
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),] # transfer models
hist(tlData$score,
main=paste("Performance Histogram of Transfer Learning Models on", ts),
xlab="accuracy")
# superimpose a line for each baseline model
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
# dictionary mapping baseline model to its line color in the histograms
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
# produce a new histogram of accuracies for each test set
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]    # baseline models
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),] # transfer models
hist(tlData$score, xlim=c(0.0,1.0),
main=paste("Performance Histogram of Transfer Learning Models on", ts),
xlab="accuracy")
# superimpose a line for each baseline model
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
# dictionary mapping baseline model to its line color in the histograms
colorDict = Dict$new(c("B1" = "red", "B2" = "blue", "B3" = "green"))
# produce a new histogram of accuracies for each test set
for (ts in testSetNames) {
blData = data[which(data$TeD==ts & data$model %in% baselineNames),]    # baseline models
tlData = data[which(data$TeD==ts & !(data$model %in% baselineNames)),] # transfer models
hist(tlData$score, xlim=c(0.0,1.0), breaks = 10,
main=paste("Performance Histogram of Transfer Learning Models on", ts),
xlab="accuracy")
# superimpose a line for each baseline model
for (i in 1:nrow(blData)) {
abline(v=blData[i,]$score, col=colorDict[blData[i,]$model])
}
}
